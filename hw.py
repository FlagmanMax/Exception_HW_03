# Урок 3. Продвинутая работа с исключениями в Java

# Напишите приложение, которое будет запрашивать у пользователя следующие данные в произвольном порядке, разделенные пробелом:
# Фамилия Имя Отчество дата рождения номертелефона пол

# Форматы данных:
#     фамилия, имя, отчество - строки
#     датарождения - строка формата dd.mm.yyyy
#     номер телефона - целое беззнаковое число без форматирования
#     пол - символ латиницей f или m.

# Приложение должно проверить введенные данные по количеству. Если количество не совпадает с требуемым, вернуть код ошибки,
# обработать его и показать пользователю сообщение, что он ввел меньше и больше данных, чем требуется.

# Приложение должно попытаться распарсить полученные значения и выделить из них требуемые параметры.
# Если форматы данных не совпадают, нужно бросить исключение, соответствующее типу проблемы. 

# Можно использовать встроенные типы java и создать свои. Исключение должно быть корректно обработано, пользователю выведено сообщение с информацией, что именно неверно.

# Если всё введено и обработано верно, должен создаться файл с названием, равным фамилии, в него в одну строку должны записаться полученные данные, вида
# <Фамилия><Имя><Отчество><дата рождения> <номер телефона><пол>

# Однофамильцы должны записаться в один и тот же файл, в отдельные строки.

# Не забудьте закрыть соединение с файлом.

# При возникновении проблемы с чтением-записью в файл, исключение должно быть корректно обработано, пользователь должен увидеть стектрейс ошибки.

import time

class dataError_nameCount(Exception):
    pass

class dataError_nameDigit(Exception):
    pass

class dataError_phone(Exception):
    pass

class dataError_gender(Exception):
    pass

def InputName():
    data = input("Введите ФИО > ")
    dataSplitted = []
    dataSplitted = data.split()
    count = len(dataSplitted)
    if count != 3:
        raise dataError_nameCount(f"Ошибка ввода: поле <ФИО> - количество введенных данных = {count} вместо 3")   
    
    for i in range(3):
        if (dataSplitted[i].isdigit()):
           raise dataError_nameDigit(f"Ошибка ввода: поле <ФИО> - в слове номер {i+1} цифры вместо букв ({dataSplitted[i]})")  

    return dataSplitted

def InputDate():
    data = input("Введите дату рождения в формате dd.mm.yyyy > ")
    try:
        time.strptime(data, "%d.%m.%Y")
    except ValueError:
        raise ValueError("Ошибка ввода: поле <Дата рождения>")
    return data

def InputPhone():
    data = input("Введите номер телефона - целое беззнаковое число без форматирования > ")
    if (not data.isdigit()):
        raise dataError_phone(f"Ошибка ввода: поле <номер телефона>")   
    return data

def InputGender():
    data = input("Введите пол - символ латиницей f или m > ")
    if (data != 'f') and  (data != 'm'):
        raise dataError_gender(f"Ошибка ввода: поле <пол>, введено {data}, вместо символов f/m")   
    return data

userData = []           # массив данных
userData = InputName()          # Ввод и проверка ФИО
userData.append(InputDate())    # Ввод и проверка Даты рождения
userData.append(InputPhone())   # Ввод номера телефона
userData.append(InputGender())  # Ввод пола
print(userData)

with open(userData[0], mode = 'a+') as f:
    for i in range(6):
        f.write("<" + userData[i] + ">")
    f.write("\n")

print(f"Данные добавлены в файл {userData[0]}")

